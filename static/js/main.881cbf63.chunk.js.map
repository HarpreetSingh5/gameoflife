{"version":3,"sources":["logic/gamelogic.js","Grid.js","Controls.js","Game.js","App.js","index.js"],"names":["create_grid","grid","Array","i","length","fill","living_cells","current_grid","x","y","filter","c","neighbours","element","next_grid","newgrid","living","cell","changeArrayValue","arr","val","slice","shuffle","map","row","Math","round","random","Grid","toggleCell","props","new_grid","onChange","renderCell","key","className","onMouseDown","style","backgroundColor","renderRow","this","Component","Controls","Button","content","icon","labelPosition","onClick","disabled","playing","clear","stop","play","Game","state","generation","changeState","setState","onClear","onShuffle","onNext","onPlay","interval","setInterval","onStop","clearInterval","next","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.881cbf63.chunk.js","sourcesContent":["export const grid_size = 50;\r\nexport const GENERATION_TIME = 200;\r\nexport const alive = 1;\r\nexport const dead = 0;\r\n\r\nexport const create_grid = ()=>{\r\n    let grid = new Array(grid_size);\r\n    for(let i=0;i<grid.length;i++){\r\n        grid[i] = Array(grid_size).fill(0);\r\n    }\r\n    return grid;\r\n}\r\n\r\n\r\nexport const neighbours = (x,y)=>{\r\n    return [[x - 1, y - 1], [x, y - 1], [x + 1, y - 1], [x - 1, y], [x + 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]]  //getting all valid neighbours\r\n    .filter(c =>\r\n        c[0] >= 0 && c[0] < grid_size &&  //making sure our neighbours are within bounds. They shouldnt be outside our grid \r\n        c[1] >= 0 && c[1] < grid_size\r\n    );\r\n\r\n}\r\n\r\nexport const living_cells = (current_grid,x,y)=>{\r\n    return neighbours(x,y).filter(element=>current_grid[element[0]][element[1]] === alive).length  //getting number of living cells.\r\n}\r\n\r\nexport const next_grid = current_grid =>{\r\n    let newgrid = create_grid();\r\n    for (let x = 0; x < grid_size; x++) {\r\n        for (let y = 0; y < grid_size; y++) {\r\n            const living = living_cells(current_grid, x, y);\r\n            const cell = current_grid[x][y];\r\n            if((living==3) || (living==2 && cell ==1)){\r\n                newgrid[x][y] = 1;            \r\n            }\r\n            else{newgrid[x][y]=0;\r\n            }  \r\n        }                                                 //In the next generation we need to decide whats alive and whats not\r\n    }\r\n    return newgrid;\r\n}\r\n\r\nexport const changeArrayValue = (arr, i, val) => [\r\n    ...arr.slice(0, i), val, ...arr.slice(i + 1)\r\n];\r\n\r\nexport const shuffle = grid => grid.map(row => row.map(cell => Math.round(Math.random())));","import React, {Component} from 'react';\r\nimport { changeArrayValue } from './logic/gamelogic';\r\n\r\nclass Grid extends Component {\r\n\r\n  toggleCell = (cell, x, y) => {\r\n    const {grid } = this.props;\r\n    const row = changeArrayValue(grid[y], x, cell ? 0 : 1);\r\n    const new_grid = changeArrayValue(grid, y, row);\r\n    this.props.onChange(new_grid);\r\n  }\r\n\r\n  renderCell = (cell, x, y) => {\r\n    return (\r\n      <div key={x}\r\n        className='cell'\r\n        onMouseDown={() => this.toggleCell(cell, x, y)}\r\n        style={{ backgroundColor: cell ? '#edd3f5' : null }}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderRow = (row, y) => (\r\n    <div className='row' key={y}>\r\n      {row.map((cell, x) => this.renderCell(cell, x, y))}\r\n    </div>\r\n  )\r\n\r\n  render() {\r\n    return (\r\n      <div className='game-grid'>\r\n        {this.props.grid.map((row, y) => this.renderRow(row, y))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nconst Controls = (props) => (\r\n  <div className='controls'>\r\n    <Button content='Shuffle' icon='random' labelPosition='right'\r\n      onClick={props.shuffle} disabled={props.playing}\r\n    />\r\n    <Button content='Clear' icon='redo' labelPosition='right' onClick={props.clear} />\r\n    {props.playing ?\r\n      <Button content='Stop' icon='stop' labelPosition='right' onClick={props.stop} /> :\r\n      <Button content='Play' icon='play' labelPosition='right' onClick={props.play} />\r\n    }\r\n  </div>\r\n);\r\n\r\nexport default Controls;","import React ,{Component} from 'react';\r\nimport Grid from './Grid';\r\nimport Controls from './Controls.js';\r\nimport {  create_grid, next_grid, shuffle } from './logic/gamelogic';;\r\n\r\n\r\nclass Game extends Component {\r\n\r\n  state = {\r\n    grid: create_grid(),\r\n    generation: 0,\r\n    playing: false,\r\n  }\r\n\r\n  changeState = (grid, generation) => this.setState({\r\n    grid: grid,\r\n    generation: generation,\r\n  });\r\n\r\n  onChange = grid => this.changeState(grid, this.state.generation + 1);\r\n\r\n  onClear = () => this.changeState(create_grid(), 0);\r\n\r\n  onShuffle = () => this.changeState(shuffle(this.state.grid), 0);\r\n\r\n  onNext = () => this.onChange(next_grid(this.state.grid));\r\n\r\n  onPlay = () => {\r\n    this.setState({ playing: true });\r\n    this.interval = setInterval(() => this.onNext(), 200);\r\n  }\r\n\r\n  onStop = () => {\r\n    this.setState({ playing: false });\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { grid, playing } = this.state;\r\n    return (\r\n      <div>\r\n        <Grid grid={grid} onChange={this.onChange} />\r\n        <p>Generation: {this.state.generation}</p>\r\n        <Controls\r\n          clear={this.onClear}\r\n          next={this.onNext}\r\n          play={this.onPlay}\r\n          stop={this.onStop}\r\n          shuffle={this.onShuffle}\r\n          playing={playing}\r\n        />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Game;","import React,{Component} from 'react';\nimport Game from './Game'\n\nclass App extends Component{\n  render(){\n  return (\n    <div className=\"App\">\n     <Game/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}